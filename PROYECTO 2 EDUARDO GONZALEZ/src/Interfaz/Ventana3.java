/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import Codigo.ArbolBinario;
import Codigo.Solucion;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Esta ventana permite buscar y mostrar los datos de un patron en especifico.
 * Tercera ventana del programa.
 * @author edusye
 */
public class Ventana3 extends javax.swing.JFrame {
    private Ventana1 ventanaPrincipal;
    private Solucion solucion;
    
    /**
     * Constructor de la Ventana de busqueda de patron
     * 
     * @param ventanaPrincipal La instancia de Ventana1 que la invocó
     * @param solucion La instancia de Solucion con los patrones cargados
     */
    public Ventana3(Ventana1 ventanaPrincipal, Solucion solucion) {
        this.ventanaPrincipal = ventanaPrincipal;
        this.solucion = solucion;
        initComponents();
        cargarPatrones();
        configurarComponentes();
    }
    
    /**
     * Carga todos los patrones disponibles en el ComboBox ordenados alfabéticamente
     */
    private void cargarPatrones() {
        try {

            PATRONES.removeAllItems();
            PATRONES.addItem("-- Selecciona un patrón y luego dale click a buscar--");
            
            List<String> patrones = solucion.OrdenadosAlfabeticamente();
            
            if (patrones.isEmpty()) {
                PATRONES.addItem("No hay patrones disponibles");
                return;
            }
            
            for (String patron : patrones) {
                PATRONES.addItem(patron);
            }            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar los patrones: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Configura los componentes de la interfaz
     */
    private void configurarComponentes() {
        RESULTADO.setEditable(false);
        RESULTADO.setLineWrap(true);
    }                  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        VOLVER = new javax.swing.JButton();
        PATRONES = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        RESULTADO = new javax.swing.JTextArea();
        BUSCAR = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(223, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        VOLVER.setBackground(new java.awt.Color(255, 153, 153));
        VOLVER.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 18)); // NOI18N
        VOLVER.setText("VOLVER");
        VOLVER.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        VOLVER.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                VOLVERMouseClicked(evt);
            }
        });
        jPanel1.add(VOLVER, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 516, -1, 30));

        PATRONES.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(PATRONES, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 42, 615, 43));

        RESULTADO.setColumns(20);
        RESULTADO.setRows(5);
        jScrollPane1.setViewportView(RESULTADO);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 127, 615, 319));

        BUSCAR.setBackground(new java.awt.Color(255, 153, 153));
        BUSCAR.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 18)); // NOI18N
        BUSCAR.setText("BUSCAR");
        BUSCAR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BUSCAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BUSCARMouseClicked(evt);
            }
        });
        jPanel1.add(BUSCAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 516, -1, 30));

        jPanel2.setBackground(new java.awt.Color(223, 242, 242));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 500, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Maneja el evento de clic del botón VOLVER.
     * Cierra la ventana actual y muestra la ventana principal si está disponible.
     * 
     * @param evt El evento de clic del mouse que desencadena esta acción
     */
    private void VOLVERMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VOLVERMouseClicked
        this.dispose();
        if (ventanaPrincipal != null) {
            ventanaPrincipal.setVisible(true);
        }
    }//GEN-LAST:event_VOLVERMouseClicked
    
   /**
    * Maneja el evento de clic del botón BUSCAR.
    * Realiza la búsqueda de un patrón seleccionado en el ComboBox llamado PATRONES. 
    * Muestra los resultados en el textarea llamado RESULTADO.
    * 
    * @param evt El evento de clic del mouse que desencadena esta acción.
    * 
    * @see ArbolBinario.Nodo
    * @see #solucion
    * @see javax.swing.JOptionPane
    */
    private void BUSCARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BUSCARMouseClicked
        try {
            String patronSeleccionado = (String) PATRONES.getSelectedItem();
            if (patronSeleccionado == null || 
                patronSeleccionado.equals("-- Selecciona un patrón--") ||
                patronSeleccionado.equals("No hay patrones disponibles")) {
                JOptionPane.showMessageDialog(this, 
                    "Por favor, selecciona un patrón válido.", 
                    "Selección requerida", 
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            ArbolBinario.Nodo nodoEncontrado = solucion.buscarPatron(patronSeleccionado);
            
            if (nodoEncontrado == null) {
                RESULTADO.setText("Patrón no encontrado: " + patronSeleccionado);
                return;
            }
            
            StringBuilder resultado = new StringBuilder();
            resultado.append("=== INFORMACIÓN DEL PATRÓN ===\n\n");
            resultado.append("Patrón: ").append(nodoEncontrado.patron).append("\n");
            resultado.append("Frecuencia: ").append(nodoEncontrado.frecuencia).append(" veces\n\n");
            
            resultado.append("Posiciones encontradas:\n");
            for (int i = 0; i < nodoEncontrado.posiciones.size(); i++) {
                resultado.append("- Posición ").append(nodoEncontrado.posiciones.get(i));
                if (i < nodoEncontrado.posiciones.size() - 1) {
                    resultado.append("\n");
                }
            }
            
        RESULTADO.setText(resultado.toString());
            RESULTADO.setCaretPosition(0); 
            
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, 
                "Error durante la búsqueda: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BUSCARMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BUSCAR;
    private javax.swing.JComboBox<String> PATRONES;
    private javax.swing.JTextArea RESULTADO;
    private javax.swing.JButton VOLVER;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
